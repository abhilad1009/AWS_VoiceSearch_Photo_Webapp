AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "search-photos"
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code:
                ZipFile: |
                    import json
                    import boto3
                    # import requests
                    # from botocore.vendored import requests
                    from opensearchpy import OpenSearch, RequestsHttpConnection
                    from requests_aws4auth import AWS4Auth
                    from nltk.stem.porter import *

                    def get_awsauth(region, service):
                        cred = boto3.Session().get_credentials()
                        return AWS4Auth(cred.access_key,
                                        cred.secret_key,
                                        region,
                                        service,
                                        session_token=cred.token)


                    def lambda_handler(event, context):
                        print((event))
                        print(event['queryStringParameters']['q'])

                        client = boto3.client('lexv2-runtime')
                        searchquery = event['queryStringParameters']['q']

                        response = client.recognize_text(botId='LCISKB6Q4C',
                                                        botAliasId='Q3BOF5V2X9',
                                                        localeId='en_US',
                                                        sessionId="test0",
                                                        text=searchquery)
                        print(response)
                        lex_response = response['sessionState']['intent']
                        keys = []

                        stemmer = PorterStemmer()

                        if "key1" in lex_response["slots"] and lex_response["slots"]["key1"] != None:
                            try:
                                keys.append(stemmer.stem(lex_response["slots"]["key1"]['value']['interpretedValue'].lower()))
                            except:
                                keys.append(lex_response["slots"]["key1"]['value']['interpretedValue'].lower())
                        if "key2" in lex_response["slots"] and lex_response["slots"]["key2"] != None:
                            try:
                                keys.append(stemmer.stem(lex_response["slots"]["key2"]['value']['interpretedValue'].lower()))
                            except:
                                keys.append(lex_response["slots"]["key2"]['value']['interpretedValue'].lower())

                        print(keys)

                        REGION = 'us-east-1'
                        HOST = "search-photos-zurqo2mqy4mfjloidzi62aoxsq.us-east-1.es.amazonaws.com"  # add host here
                        INDEX = "photos"  # add index
                        client = OpenSearch(hosts=[{
                            'host': HOST,
                            'port': 443
                        }],
                            http_auth=get_awsauth(REGION, 'es'),
                            use_ssl=True,
                            verify_certs=True,
                            connection_class=RequestsHttpConnection)

                        results = set()
                        for k in keys:

                            q = {'size': 100, 'query': {'multi_match': {'query': k}}}
                            res = client.search(index=INDEX, body=q)
                            hits = res['hits']['hits']
                            for hit in hits:
                                results.add(hit['_source']['objectKey'])

                        return {
                            'statusCode': 200,
                            'headers': {"Access-Control-Allow-Origin": "*", "Access-Control-Allow-Methods": "*", "Access-Control-Allow-Headers": "*"},
                            'body': json.dumps({"files": list(results)})
                        }

            MemorySize: 128
            Role: !GetAtt IAMRoleLambda.Arn
            Runtime: "python3.9"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction2:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "index-photos"
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code:
                ZipFile: |
                    import logging
                    import base64
                    import json
                    import boto3
                    import os
                    import time
                    import requests
                    from opensearchpy import OpenSearch, RequestsHttpConnection
                    from requests_aws4auth import AWS4Auth
                    from nltk.stem.porter import *


                    def get_awsauth(region, service):
                        cred = boto3.Session().get_credentials()
                        return AWS4Auth(cred.access_key,
                                        cred.secret_key,
                                        region,
                                        service,
                                        session_token=cred.token)


                    def lambda_handler(event, context):

                        print("Lambda Index Photos")
                        print("event:", event)

                        s3_metadata = event['Records'][0]['s3']
                        s3_bucket = s3_metadata['bucket']['name']
                        s3_key = s3_metadata['object']['key']
                        # print(s3_bucket)
                        # print(s3_key)

                        client = boto3.client('rekognition')
                        img_obj = {'S3Object': {'Bucket': s3_bucket, 'Name': s3_key}}
                        print("img_obj", img_obj)

                        labels_resp = client.detect_labels(Image=img_obj)
                        print("rekognition response:", labels_resp)
                        timestamp = time.time()

                        labels = []
                        stemmer = PorterStemmer()

                        for i in range(len(labels_resp['Labels'])):
                            try:
                                labels.append(stemmer.stem(
                                    labels_resp['Labels'][i]['Name'].lower()))
                            except:
                                labels.append(labels_resp['Labels'][i]['Name'].lower())

                        s3 = boto3.client('s3')
                        img_s3_data = s3.head_object(Bucket=s3_bucket, Key=s3_key)

                        if img_s3_data["Metadata"]:
                            customlabels = img_s3_data["Metadata"]["customlabels"]
                            print("customlabels : ", customlabels)
                            customlabels = customlabels.split(',')
                            customlabels = list(map(lambda x: x.lower(), customlabels))
                            for cl in customlabels:
                                print(cl)
                                try:
                                    cl = stemmer.stem(cl.lower().strip())
                                except:
                                    cl = cl.lower().strip()
                                if cl not in labels:
                                    labels.append(cl)

                        print(labels)

                        elastic_data = {'objectKey': s3_key,
                                        'bucket': s3_bucket,
                                        'createdTimestamp': timestamp,
                                        'labels': labels}

                        REGION = 'us-east-1'
                        HOST = "search-photos-zurqo2mqy4mfjloidzi62aoxsq.us-east-1.es.amazonaws.com"  # add host here
                        INDEX = "photos"  # add index
                        client = OpenSearch(hosts=[{
                            'host': HOST,
                            'port': 443
                        }],
                            http_auth=get_awsauth(REGION, 'es'),
                            use_ssl=True,
                            verify_certs=True,
                            connection_class=RequestsHttpConnection)

                        resp = client.index(index='photos', id=s3_key, body=elastic_data)
                        print(resp)
                        # add elastic url here for indexing
                        # url = "https://search-photos-zurqo2mqy4mfjloidzi62aoxsq.us-east-1.es.amazonaws.com/photos"
                        # headers = {"Content-Type": "application/json"}

                        # service = 'es'
                        # credentials = boto3.Session().get_credentials()
                        # awsauth = AWS4Auth(credentials.access_key, credentials.secret_key,
                        #                REGION, service, session_token=credentials.token)

                        # r = requests.put(url, auth=awsauth ,data=json.dumps(elastic_data).encode("utf-8"),headers=headers)  # requests.get, post, and delete have similar syntax
                        # print(r.text)

                        return {
                            'statusCode': 200,
                            'headers': {
                                'Access-Control-Allow-Origin': '*',
                                'Access-Control-Request-Headers': '*',
                                'Access-Control-Allow-Headers': '*'

                            },
                            'body': json.dumps('Index Photos Executed')
                        }

            MemorySize: 128
            Role: !GetAtt IAMRoleLambda.Arn
            Runtime: "python3.9"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "s3.amazonaws.com"
            SourceArn: !Sub "arn:aws:s3:::photobalti3"
    LambdaPermission2:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search"
    ApiGatewayIamRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Sid: ''
                      Effect: 'Allow'
                      Principal:
                        Service:
                            - 'apigateway.amazonaws.com'
                      Action:
                        - 'sts:AssumeRole'
            Path: '/'
            Policies:
                - PolicyName: LambdaAccess
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                        - Effect: 'Allow'
                          Action: 'lambda:*'
                          Resource: !GetAtt LambdaFunction.Arn
    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "photoalbumbalti3"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            CorsConfiguration: 
                CorsRules: 
                  - 
                    AllowedHeaders: 
                      - "*"
                    AllowedMethods: 
                      - "GET"
                      - "HEAD"
                      - "PUT"
                    AllowedOrigins: 
                      - "*"
            WebsiteConfiguration: 
                IndexDocument: "index.html"

    S3Bucket2:
        Type: "AWS::S3::Bucket"
        DependsOn: LambdaPermission
        Properties:
            BucketName: "photobalti3"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            CorsConfiguration: 
                CorsRules: 
                  - 
                    AllowedHeaders: 
                      - "*"
                    AllowedMethods: 
                      - "GET"
                      - "HEAD"
                      - "PUT"
                    AllowedOrigins: 
                      - "*"
            NotificationConfiguration: 
                LambdaConfigurations: 
                  - 
                    Event: "s3:ObjectCreated:Put"
                    Function: !GetAtt LambdaFunction2.Arn

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "PublicReadGetObject"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

    S3BucketPolicy2:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket2
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "PublicReadGetObject"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket2}/*"

    ApiGatewayRestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: !Sub "AI Photo Search"
            Description: !Sub "AI Photo Search application, built during the Cloud and Big Data course at Columbia University."
            ApiKeySourceType: "HEADER"
            BinaryMediaTypes: 
              - "image/png"
              - "image/jpg"
              - "image/jpeg"
              - "image/png;base64"
              - "image/jpeg;base64"
              - "image/jpg;base64"
            EndpointConfiguration: 
                Types: 
                  - "REGIONAL"

    ApiGatewayMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource3
            HttpMethod: "GET"
            AuthorizationType: "NONE"
            ApiKeyRequired: true
            OperationName: !Sub "searchPhotos"
            RequestParameters: 
                "method.request.querystring.q": false
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": !Ref ApiGatewayModel3
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
              - 
                ResponseModels: 
                    "application/json": !Ref ApiGatewayModel4
                StatusCode: "403"
              - 
                ResponseModels: 
                    "application/json": !Ref ApiGatewayModel4
                StatusCode: "500"
            Integration: 
                CacheNamespace: !Ref ApiGatewayResource3
                ContentHandling: "CONVERT_TO_TEXT"
                Credentials: !GetAtt ApiGatewayIamRole.Arn
                IntegrationHttpMethod: "POST"
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                TimeoutInMillis: 29000
                Type: "AWS_PROXY"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:search-photos/invocations"

    ApiGatewayMethod2:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource3
            HttpMethod: "OPTIONS"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses: 
              - 
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                CacheNamespace: !Ref ApiGatewayResource3
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestTemplates: 
                    "application/json": "{\"statusCode\": 200}"
                TimeoutInMillis: 29000
                Type: "MOCK"

    ApiGatewayMethod3:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource4
            HttpMethod: "OPTIONS"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: 
                "method.request.header.Content-Type": false
                "method.request.header.x-amz-meta-customLabels": false
            MethodResponses: 
              - 
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                CacheNamespace: !Ref ApiGatewayResource4
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customLabels'"
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestTemplates: 
                    "application/json": "{\"statusCode\": 200}"
                TimeoutInMillis: 29000
                Type: "MOCK"

    ApiGatewayMethod4:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource4
            HttpMethod: "PUT"
            AuthorizationType: "NONE"
            ApiKeyRequired: true
            RequestParameters: 
                "method.request.header.Content-Type": false
                "method.request.header.x-amz-meta-customLabels": false
                "method.request.path.bucket": true
                "method.request.path.key": true
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": !Ref ApiGatewayModel
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                CacheNamespace: !Ref ApiGatewayResource4
                ContentHandling: "CONVERT_TO_BINARY"
                Credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/API_128392"
                IntegrationHttpMethod: "PUT"
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Headers": "'*'"
                        "method.response.header.Access-Control-Allow-Methods": "'*'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    SelectionPattern: ""
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_TEMPLATES"
                RequestParameters: 
                    "integration.request.header.Content-Type": "method.request.header.Content-Type"
                    "integration.request.header.x-amz-meta-customLabels": "method.request.header.x-amz-meta-customLabels"
                    "integration.request.path.bucket": "method.request.path.bucket"
                    "integration.request.path.object": "method.request.path.key"
                RequestTemplates: {}
                TimeoutInMillis: 29000
                Type: "AWS"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{object}"

    ApiGatewayStage:
        Type: "AWS::ApiGateway::Stage"
        Properties:
            StageName: "test0"
            DeploymentId: !Ref ApiGatewayDeployment
            RestApiId: !Ref ApiGatewayRestApi
            CacheClusterEnabled: false
            TracingEnabled: false

    ApiGatewayDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn :
            - ApiGatewayMethod
            - ApiGatewayMethod2
            - ApiGatewayMethod3
            - ApiGatewayMethod4
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
        

    ApiGatewayResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "{bucket}"
            ParentId: !Ref ApiGatewayResource2

    ApiGatewayResource2:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "upload"
            ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    ApiGatewayResource3:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "search"
            ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    ApiGatewayResource4:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "{key}"
            ParentId: !Ref ApiGatewayResource

    ApiGatewayApiKey:
        Type: "AWS::ApiGateway::ApiKey"
        Properties:
            Enabled: true
            Name: "photoalbum3"

    ApiGatewayModel:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "MODEL84109f"
            Schema: |
                {
                  "type" : "object",
                  "properties" : { }
                }
            ContentType: "application/json"

    ApiGatewayModel2:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "Photo"
            Schema: |
                {
                  "type" : "object",
                  "properties" : {
                    "url" : {
                      "type" : "string"
                    },
                    "labels" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  }
                }
                
            ContentType: "application/json"

    ApiGatewayModel3:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "SearchResponse"
            Schema: !Sub |
                {
                  "type" : "object",
                  "properties" : {
                    "results" : {
                      "type" : "array",
                      "items" : {
                            "type" : "object",
                            "properties" : {
                                "url" : {
                                "type" : "string"
                                },
                                "labels" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "string"
                                }
                                }
                            }
                        }
                    }
                  }
                }
                
            ContentType: "application/json"

    ApiGatewayModel4:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "Error2"
            Schema: |
                {
                  "type" : "object",
                  "properties" : {
                    "code" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "message" : {
                      "type" : "string"
                    }
                  }
                }
                
            ContentType: "application/json"

    ApiGatewayUsagePlan:
        Type: "AWS::ApiGateway::UsagePlan"
        Properties:
            UsagePlanName: "photoalbumapiusage"
            ApiStages: 
              - 
                ApiId: !Ref ApiGatewayRestApi
                Stage: !Ref ApiGatewayStage

    ApiGatewayUsagePlanKey:
        Type: "AWS::ApiGateway::UsagePlanKey"
        Properties:
            KeyId: !GetAtt ApiGatewayApiKey.APIKeyId
            KeyType: "API_KEY"
            UsagePlanId: !Ref ApiGatewayUsagePlan


    OpenSearchServiceDomain:
        Type: "AWS::OpenSearchService::Domain"
        Properties:
            DomainName: "photos"
            EngineVersion: "OpenSearch_2.5"
            ClusterConfig: 
                DedicatedMasterEnabled: false
                InstanceCount: 1
                InstanceType: "t3.small.search"
                ZoneAwarenessEnabled: false
                WarmEnabled: false
            AccessPolicies: {"Version":"2012-10-17" , "Statement":[{"Effect":"Allow","Principal":{"AWS":"*"},"Action":"es:*","Resource":"arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/photos/*"}]}
            EncryptionAtRestOptions: 
                Enabled: true
            NodeToNodeEncryptionOptions: 
                Enabled: true
            AdvancedOptions: 
                "indices.fielddata.cache.size": "20"
                "indices.query.bool.max_clause_count": "1024"
                override_main_response_version: "false"
                "rest.action.multi.allow_explicit_index": "true"
            EBSOptions: 
                EBSEnabled: true
                VolumeType: "gp3"
                VolumeSize: 10
                Iops: 3000
                Throughput: 125
            CognitoOptions: 
                Enabled: false
            DomainEndpointOptions: 
                EnforceHTTPS: true
                TLSSecurityPolicy: "Policy-Min-TLS-1-0-2019-07"
                CustomEndpointEnabled: false
            AdvancedSecurityOptions: 
                Enabled: true
                InternalUserDatabaseEnabled: false
                AnonymousAuthEnabled: false
                MasterUserOptions: 
                    MasterUserARN: !GetAtt IAMRoleLambda.Arn
    IAMManagedPolicyLambda:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-0cf4809f-b8b9-4469-8faf-d2ed9c8dca82"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/index-photos:*"
                            ]
                        }
                    ]
                }

    IAMRoleLambda:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "index-photos-role-xtds4glg"
            AssumeRolePolicyDocument: |
                {"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicyLambda
              - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
              - "arn:aws:iam::aws:policy/AmazonLexFullAccess"
              - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              - "arn:aws:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy"
              - "arn:aws:iam::aws:policy/AmazonS3OutpostsFullAccess"
              - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildBasePolicy-photolambdabuild-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/photolambdabuild",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/photolambdabuild:*"
                            ],
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                            ],
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codebuild:CreateReportGroup",
                                "codebuild:CreateReport",
                                "codebuild:UpdateReport",
                                "codebuild:BatchPutTestCases",
                                "codebuild:BatchPutCodeCoverages"
                            ],
                            "Resource": [
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/photolambdabuild-*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy2:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildBasePolicy-photofrontendbuild-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/photofrontendbuild",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/photofrontendbuild:*"
                            ],
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                            ],
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codebuild:CreateReportGroup",
                                "codebuild:CreateReport",
                                "codebuild:UpdateReport",
                                "codebuild:BatchPutTestCases",
                                "codebuild:BatchPutCodeCoverages"
                            ],
                            "Resource": [
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/photofrontendbuild-*"
                            ]
                        }
                    ]
                }

    S3BucketCodesource:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "codesourceforcodepipeline"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false

    S3BucketCodesourcePolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3BucketCodesource
            PolicyDocument: 
                Version: "2012-10-17"
                Id: "SSEAndSSLPolicy"
                Statement: 
                  - 
                    Sid: "DenyUnEncryptedObjectUploads"
                    Effect: "Deny"
                    Principal: "*"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3BucketCodesource}/*"
                    Condition: 
                        StringNotEquals: 
                            "s3:x-amz-server-side-encryption": "aws:kms"
                  - 
                    Sid: "DenyInsecureConnections"
                    Effect: "Deny"
                    Principal: "*"
                    Action: "s3:*"
                    Resource: !Sub "arn:aws:s3:::${S3BucketCodesource}/*"
                    Condition: 
                        Bool: 
                            "aws:SecureTransport": "false"

    CodeBuildProject:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: "photolambdabuild"
            Source: 
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: "photolambdabuild"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                Image: "aws/codebuild/standard:4.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !GetAtt IAMRole2.Arn
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
            BadgeEnabled: false
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "ENABLED"
                S3Logs: 
                    Status: "DISABLED"
                    EncryptionDisabled: false
            Visibility: "PRIVATE"

    CodeBuildProject2:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: "photofrontendbuild"
            Source: 
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: "photofrontendbuild"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                Image: "aws/codebuild/standard:4.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !GetAtt IAMRole.Arn
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
            BadgeEnabled: false
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "ENABLED"
                S3Logs: 
                    Status: "DISABLED"
                    EncryptionDisabled: false
            Visibility: "PRIVATE"

    CodeBuildSourceCredential:
        Type: "AWS::CodeBuild::SourceCredential"
        Properties:
            AuthType: "PERSONAL_ACCESS_TOKEN"
            ServerType: "GITHUB"
            Token: "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"
    
    GitHubConnection:
        Type: 'AWS::CodeStarConnections::Connection'
        Properties:
            ConnectionName: MyConnection
            ProviderType: GitHub

    CodePipelinePipeline:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: "photofrontend"
            RoleArn: !GetAtt IAMRole4.Arn
            ArtifactStore: 
                Location: !Ref S3Bucket
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        # Category: "Source"
                        # Owner: "AWS"
                        # Provider: "CodeStarSourceConnection"
                        # Version: "1"
                        Category: "Source"
                        Owner: "ThirdParty"
                        Provider: "GitHub"
                        Version: "1"
                    Configuration: 
                        # BranchName: "main"
                        # ConnectionArn: !Ref GitHubConnection
                        # FullRepositoryId: "abhilad1009/AWS_VoiceSearch_Photo_Webapp"
                        # OutputArtifactFormat: "CODE_ZIP"
                        Owner: "abhilad1009"
                        Repo: "AWS_VoiceSearch_Photo_Webapp"
                        Branch: "main"
                        OAuthToken: "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"
                        PollForSourceChanges: true
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - 
                Name: "Deploy"
                Actions: 
                  - 
                    Name: "Deploy"
                    ActionTypeId: 
                        Category: "Deploy"
                        Owner: "AWS"
                        Provider: "S3"
                        Version: "1"
                    Configuration: 
                        BucketName: "photoalbumbalti3"
                        Extract: "true"
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "DeployVariables"
                    RunOrder: 1

    CodePipelinePipeline2:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: "photolambdapipeline"
            RoleArn: !GetAtt IAMRole3.Arn
            ArtifactStore: 
                Location: !Ref S3Bucket
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "ThirdParty"
                        Provider: "GitHub"
                        Version: "1"
                    Configuration: 
                        # BranchName: "main"
                        # ConnectionArn: !Ref GitHubConnection
                        # FullRepositoryId: "abhilad1009/AWS_VoiceSearch_Photo_Webapp"
                        # OutputArtifactFormat: "CODE_ZIP"
                        Owner: "abhilad1009"
                        Repo: "AWS_VoiceSearch_Photo_Webapp"
                        Branch: "main"
                        OAuthToken: "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"
                        PollForSourceChanges: true
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - 
                Name: "Build"
                Actions: 
                  - 
                    Name: "Build"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: !Ref CodeBuildProject
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    OutputArtifacts: 
                      - 
                        Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "BuildVariables"
                    RunOrder: 1

    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "codebuild-photofrontendbuild-service-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy2

    IAMRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "codebuild-photolambdabuild-service-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy3
              - !Ref IAMManagedPolicy
            #   - !Ref IAMPolicy

    IAMRole3:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "codedeploy-lambda-role"
            AssumeRolePolicyDocument: | 
                {"Version":"2012-10-17","Statement":[{"Sid":"","Effect":"Allow","Principal": {"Service":["codedeploy.amazonaws.com", "codepipeline.amazonaws.com"]},"Action":"sts:AssumeRole"}]}
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              - !Ref IAMManagedPolicy3
              - !Ref IAMManagedPolicy
            #   - !Ref IAMPolicy2
            #   - !Ref IAMPolicy3
            Description: "Allows CodeDeploy to route traffic to a new version of an AWS Lambda function version on your behalf."

    IAMPolicy:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": {
                        "Effect": "Allow",
                        "Action": [
                            "iam:CreateRole",
                            "iam:GetRole",
                            "iam:AttachRolePolicy",
                            "iam:PassRole",
                            "lambda:AddPermission",
                            "lambda:CreateFunction",
                            "lambda:GetFunction",
                            "lambda:UpdateFunctionCode",
                            "lambda:UpdateFunctionConfiguration",
                            "lambda:ListFunctions",
                            "logs:FilterLogEvents",
                            "logs:getLogEvents",
                            "logs:describeLogStreams"
                        ],
                        "Resource": "*"
                    }
                }
            Roles:
                - !Ref IAMRole2
            PolicyName: "codedeploy-lambdaupdate"

    IAMPolicy2:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": {
                        "Effect": "Allow",
                        "Action": [
                            "iam:CreateRole",
                            "iam:GetRole",
                            "iam:AttachRolePolicy",
                            "iam:PassRole",
                            "lambda:AddPermission",
                            "lambda:CreateFunction",
                            "lambda:GetFunction",
                            "lambda:UpdateFunctionCode",
                            "lambda:UpdateFunctionConfiguration",
                            "lambda:ListFunctions",
                            "logs:FilterLogEvents",
                            "logs:getLogEvents",
                            "logs:describeLogStreams"
                        ],
                        "Resource": "*"
                    }
                }
            Roles:
                - !Ref IAMRole3
            PolicyName: "codedeploy-updatecoderole"

    IAMPolicy3:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": ["s3:GetObject", "s3:ListBucket"],
                            "Resource": ["arn:aws:s3:::codesourceforcodepipeline",
                                        "arn:aws:s3:::*/*"]
                        }
                    ]
                }
            Roles:
                - !Ref IAMRole3
            PolicyName: "s3access"

    IAMManagedPolicy3:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-photofrontendpipeline"
            Path: "/service-role/"
            PolicyDocument: |
                {
                    "Statement": [
                        {
                            "Action": [
                                "iam:PassRole"
                            ],
                            "Resource": "*",
                            "Effect": "Allow",
                            "Condition": {
                                "StringEqualsIfExists": {
                                    "iam:PassedToService": [
                                        "cloudformation.amazonaws.com",
                                        "elasticbeanstalk.amazonaws.com",
                                        "ec2.amazonaws.com",
                                        "ecs-tasks.amazonaws.com"
                                    ]
                                }
                            }
                        },
                        {
                            "Action": [
                                "codecommit:CancelUploadArchive",
                                "codecommit:GetBranch",
                                "codecommit:GetCommit",
                                "codecommit:GetRepository",
                                "codecommit:GetUploadArchiveStatus",
                                "codecommit:UploadArchive"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codedeploy:CreateDeployment",
                                "codedeploy:GetApplication",
                                "codedeploy:GetApplicationRevision",
                                "codedeploy:GetDeployment",
                                "codedeploy:GetDeploymentConfig",
                                "codedeploy:RegisterApplicationRevision"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codestar-connections:UseConnection"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "elasticbeanstalk:*",
                                "ec2:*",
                                "elasticloadbalancing:*",
                                "autoscaling:*",
                                "cloudwatch:*",
                                "s3:*",
                                "sns:*",
                                "cloudformation:*",
                                "rds:*",
                                "sqs:*",
                                "ecs:*"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "lambda:InvokeFunction",
                                "lambda:ListFunctions"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "opsworks:CreateDeployment",
                                "opsworks:DescribeApps",
                                "opsworks:DescribeCommands",
                                "opsworks:DescribeDeployments",
                                "opsworks:DescribeInstances",
                                "opsworks:DescribeStacks",
                                "opsworks:UpdateApp",
                                "opsworks:UpdateStack"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "cloudformation:CreateStack",
                                "cloudformation:DeleteStack",
                                "cloudformation:DescribeStacks",
                                "cloudformation:UpdateStack",
                                "cloudformation:CreateChangeSet",
                                "cloudformation:DeleteChangeSet",
                                "cloudformation:DescribeChangeSet",
                                "cloudformation:ExecuteChangeSet",
                                "cloudformation:SetStackPolicy",
                                "cloudformation:ValidateTemplate"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codebuild:BatchGetBuilds",
                                "codebuild:StartBuild",
                                "codebuild:BatchGetBuildBatches",
                                "codebuild:StartBuildBatch"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "devicefarm:ListProjects",
                                "devicefarm:ListDevicePools",
                                "devicefarm:GetRun",
                                "devicefarm:GetUpload",
                                "devicefarm:CreateUpload",
                                "devicefarm:ScheduleRun"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "servicecatalog:ListProvisioningArtifacts",
                                "servicecatalog:CreateProvisioningArtifact",
                                "servicecatalog:DescribeProvisioningArtifact",
                                "servicecatalog:DeleteProvisioningArtifact",
                                "servicecatalog:UpdateProduct"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cloudformation:ValidateTemplate"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:DescribeImages"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "states:DescribeExecution",
                                "states:DescribeStateMachine",
                                "states:StartExecution"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "appconfig:StartDeployment",
                                "appconfig:StopDeployment",
                                "appconfig:GetDeployment"
                            ],
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                }

    IAMManagedPolicy4:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-photolambdapipeline"
            Path: "/service-role/"
            PolicyDocument: |
                {
                    "Statement": [
                        {
                            "Action": [
                                "iam:PassRole"
                            ],
                            "Resource": "*",
                            "Effect": "Allow",
                            "Condition": {
                                "StringEqualsIfExists": {
                                    "iam:PassedToService": [
                                        "cloudformation.amazonaws.com",
                                        "elasticbeanstalk.amazonaws.com",
                                        "ec2.amazonaws.com",
                                        "ecs-tasks.amazonaws.com"
                                    ]
                                }
                            }
                        },
                        {
                            "Action": [
                                "codecommit:CancelUploadArchive",
                                "codecommit:GetBranch",
                                "codecommit:GetCommit",
                                "codecommit:GetRepository",
                                "codecommit:GetUploadArchiveStatus",
                                "codecommit:UploadArchive"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codedeploy:CreateDeployment",
                                "codedeploy:GetApplication",
                                "codedeploy:GetApplicationRevision",
                                "codedeploy:GetDeployment",
                                "codedeploy:GetDeploymentConfig",
                                "codedeploy:RegisterApplicationRevision"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codestar-connections:UseConnection"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "elasticbeanstalk:*",
                                "ec2:*",
                                "elasticloadbalancing:*",
                                "autoscaling:*",
                                "cloudwatch:*",
                                "s3:*",
                                "sns:*",
                                "cloudformation:*",
                                "rds:*",
                                "sqs:*",
                                "ecs:*"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "lambda:InvokeFunction",
                                "lambda:ListFunctions"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "opsworks:CreateDeployment",
                                "opsworks:DescribeApps",
                                "opsworks:DescribeCommands",
                                "opsworks:DescribeDeployments",
                                "opsworks:DescribeInstances",
                                "opsworks:DescribeStacks",
                                "opsworks:UpdateApp",
                                "opsworks:UpdateStack"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "cloudformation:CreateStack",
                                "cloudformation:DeleteStack",
                                "cloudformation:DescribeStacks",
                                "cloudformation:UpdateStack",
                                "cloudformation:CreateChangeSet",
                                "cloudformation:DeleteChangeSet",
                                "cloudformation:DescribeChangeSet",
                                "cloudformation:ExecuteChangeSet",
                                "cloudformation:SetStackPolicy",
                                "cloudformation:ValidateTemplate"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codebuild:BatchGetBuilds",
                                "codebuild:StartBuild",
                                "codebuild:BatchGetBuildBatches",
                                "codebuild:StartBuildBatch"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "devicefarm:ListProjects",
                                "devicefarm:ListDevicePools",
                                "devicefarm:GetRun",
                                "devicefarm:GetUpload",
                                "devicefarm:CreateUpload",
                                "devicefarm:ScheduleRun"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "servicecatalog:ListProvisioningArtifacts",
                                "servicecatalog:CreateProvisioningArtifact",
                                "servicecatalog:DescribeProvisioningArtifact",
                                "servicecatalog:DeleteProvisioningArtifact",
                                "servicecatalog:UpdateProduct"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cloudformation:ValidateTemplate"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:DescribeImages"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "states:DescribeExecution",
                                "states:DescribeStateMachine",
                                "states:StartExecution"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "appconfig:StartDeployment",
                                "appconfig:StopDeployment",
                                "appconfig:GetDeployment"
                            ],
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                }

   
    IAMRole4:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-photofrontendpipeline"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy3
              - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

    IAMRoleAPI:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "API_128392"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"s3.amazonaws.com\",\"apigateway.amazonaws.com\",\"lambda.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              - "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            Description: "Allows API Gateway to push logs to CloudWatch Logs."